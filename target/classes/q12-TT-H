MATCH (:Year {value: 2016})–[:CHILD]->(:Month {value: 11})–[:CHILD]->(d:Day{value:1})–[:CHILD]->(h:Hour)<- [:AT_TIME]-(e:Event)-[r:`has provenance`]->(s:SensorReadingProvenance) where  s.sensorType STARTS WITH 'ELec'   AND  s.readingsLocation  IN ["GW", "GW32", "FW", "FW29" , "SW", "SW00"] return SUM( e.reading)
MATCH (d:Day)–[:CHILD]->(h:Hour)<- [:AT_TIME]-(e:Event)-[r:`has provenance`]->(s:SensorReadingProvenance)  where  s.sensorType STARTS WITH 'ELec'   with SUM(e.reading) as power, d.value as maxDay order by power DESC limit 1 MATCH (d:Day{value:maxDay})–[:CHILD]->(h:Hour)<- [:AT_TIME]-(e2:Event)-[r:`has provenance`]->(s2:SensorReadingProvenance)  where s2.sensorType STARTS WITH 'Temp'  return power,  AVG (e2.reading) as Temp
MATCH(d:Day)–[:CHILD]->(h:Hour)<- [:AT_TIME]-(e:Event)-[r:`has provenance`]->(s:SensorReadingProvenance)  where s.sensorType ='CO2'  with AVG(e.reading) as CO2, d.value as maxDay order by CO2 limit 1 MATCH(d:Day{maxDay})–[:CHILD]->(h:Hour)–[:CHILD]->(m:Minute)<- [:AT_TIME]-(e2:Event)-[r:`has provenance`]->(s2:SensorReadingProvenance)  where  s2.sensorType STARTS WITH 'ELec'   return CO2,  SUM (e2.reading) as ACCPower
MATCH (:Year)–[:CHILD]->(:Month)–[:CHILD]->(d:Day)–[:CHILD]->(h:Hour)<- [:AT_TIME]-(e:Event)-[r:`has provenance`]->(s:SensorReadingProvenance)  where  s.sensorType  STARTS WITH 'ELec'   with SUM(e.reading) as power, d.value as minDay order by power ASC limit 1 MATCH (:Year)–[:CHILD]->(:Month)–[:CHILD]->(d:Day{value:minDay})–[:CHILD]->(h:Hour)<- [:AT_TIME]-(e2:Event)-[r:`has provenance`]->(s2:SensorReadingProvenance)  where s2.sensorType STARTS WITH 'Temp'   return power,  AVG (e2.reading) as Temp 
MATCH (d:Day)–[:CHILD]->(h:Hour)<- [:AT_TIME]-(e:Event)-[r:`has provenance`]->(s:SensorReadingProvenance)  where s.sensorType="CO2"  with AVG(e.reading) as CO2, d.value as minDay order by CO2 ASC limit 1 MATCH(e2:Event)-[r:`has provenance`]->(s2:SensorReadingProvenance)  where s2.sensorType STARTS WITH 'ELec'  return CO2,  SUM (e2.reading) as ACCPower order by CO2 ASC limit 1
MATCH (d:Day)–[:CHILD]->(h:Hour{value:8})<-[:NEXT*..8]-(hours:Hour)<- [:AT_TIME]-(e:Event)-[r:`has provenance`]->(s:SensorReadingProvenance)  where   s.sensorType STARTS WITH 'ELec'   return d.value, SUM( e.reading) as accReadingsPerD 
Match (e:SensorReading)-[r:`has provenance`]-> (S:SensorReadingProvenance) where   S.sensorType IN ["ELec-Sockets" , "ELec-Sockets and power"]   return S.readingsLocation, SUM( e.reading) as acc  order by   acc DESC limit 1
MATCH (d:Day)–[:CHILD]->(h:Hour)<- [:AT_TIME]-(e:Event)-[r:`has provenance`]->(s:SensorReadingProvenance)  where   s.sensorType="ELec-Lighting"    with  SUM (e.reading) as acc, s.readingsLocation as location return  location, avg(acc) as acc order by acc DESC limit 1
MATCH (:Year {value: 2016})–[:CHILD]->(m:Month)–[:CHILD]->(d:Day)–[:CHILD]->(h:Hour)<- [:AT_TIME]-(e:Event)-[r:`has provenance`]->(s:SensorReadingProvenance)  where  s.sensorType  STARTS WITH 'Temp'  with AVG(e.reading) as AVGTemp, d.value as days, m.value as months, e  as events where AVGTemp>25 with collect ([days , months]) as dates, events foreach ( d in dates | MATCH (m2:Month)–[:CHILD]->(d2:Day)–[:CHILD]->(h:Hour)<- [:AT_TIME]-(e2:Event)-[R  {type:"has provenance"}]->(s2:SensorReadingProvenance)  where  s2.sensorType="ELec-Lighting" AND d2.value=d[0] and m2.value=d[1] return  SUM (e2.reading) as Lightpower)
MATCH (:Year {value: 2016})–[:CHILD]->(:Month)–[:CHILD]->(d:Day)–[:CHILD]->(h:Hour{value:7})<-[:NEXT*..5]-(hours:Hour)<- [:AT_TIME]-(e:Event)-[r:`has provenance`]->(s:SensorReadingProvenance)  where   s.sensorType STARTS WITH 'ELec' return s.readingsLocation, AVG( e.reading) as accReadings  order by  accReadings  DESC limit 1
MATCH(d:Day)–[:CHILD]->(h:Hour)<- [:AT_TIME]-(e:Event)-[r:`has provenance`]->(s:SensorReadingProvenance)  where  s.sensorType STARTS WITH 'ELec' with  SUM (e.reading) as acc, s.readingsLocation as location, d.value as day return  location, avg(acc) as acc order by acc ASC limit 1
MATCH(d:Day)–[:CHILD]->(h:Hour)<- [:AT_TIME]-(e:Event)-[r:`has provenance`]->(s:SensorReadingProvenance)  where  s.sensorType STARTS WITH 'ELec'   with  SUM (e.reading) as acc, s.readingsLocation as location, d.value as day return  distinct location, avg(acc) as acc order by acc DESC limit 1
